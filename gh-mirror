#!/usr/bin/env python3

"""
Mirror all GitHub repositories for a user, maintaining metadata.

This can be useful when maintaining a local mirror.
"""

from __future__ import print_function
import itertools
import json
import os
import shutil
import subprocess
import sys
import argparse

try:
    from urllib.request import Request, urlopen
except ImportError:  # Python 2 fallback
    from urllib import urlopen


def repos(user):
    """
    Get all of the repositories for a user.

    :param user: the user to get the repositories for
    :returns: a list of description/url dicts
    """

    for page in itertools.count(start=1):
        req = Request("https://api.github.com/users/%s/repos?page=%d" % (user, page))
        ghauth = os.environ["GHAUTH"]
        req.add_header('Authorization',f"Bearer {ghauth}")
        """
        req.add_header('X-GitHub-Api-Version', '2022-11-28')
        """
        res_handle = urlopen(req)
        res_encoding = "utf8"
        res_json = json.loads(res_handle.read().decode(res_encoding))

        if not res_json:
            break

        for repo in res_json:
            yield repo


def repo_already_mirrored(url):
    """
    Check if a repo is already mirrored.

    :param url: the url for the repo
    :returns: a bool denoting whether the dir for this repo exists
    """

    repo_dir = os.path.basename(url)
    return os.path.isdir(repo_dir)


def update(repo):
    """
    Update a local mirror.

    :param repo: information about this repo
    """

    repo_dir = os.path.basename(repo["ssh_url"])
    subprocess.check_call(["git", "--git-dir", repo_dir, "remote", "update"])
    description(os.path.join(repo_dir, "description"), repo["description"])
    export(os.path.join(repo_dir, "git-daemon-export-ok"))


def mirror(repo):
    """
    Mirror a Git repository, maintaining metadata.

    :param repo: information about the repo to mirror
    """

    subprocess.check_call(["git", "clone", "--mirror", repo["ssh_url"]])

    repo_dir = os.path.basename(repo["ssh_url"])
    description_file = os.path.join(repo_dir, "description")
    export_file = os.path.join(repo_dir, "git-daemon-export-ok")

    description(description_file, repo["description"])
    export(export_file)


def export(export_file):
    """
    Mark a repository as exportable.

    :param export_file: the path to the git-daemon-export-ok file
    """

    open(export_file, "a").close()


def description(description_file, description):
    """
    Update a description file for a git repo.

    :param description_file: the path to the description file
    :param description: the description for this repo
    """

    if description is not None:
        with open(description_file, "wb") as f:
            f.write(description.encode("utf8") + b"\n")


def remotely_deleted_repos(remote_repos):
    """
    Return a list of all repos existing locally, but not remotely.

    :param remote_repos: the names of all repos to check
    """

    files = os.listdir(".")

    local_repos = [x for x in files if x.endswith(".git") and x != ".git"]
    remote_repo_urls = [remote_repo["ssh_url"] for remote_repo in remote_repos]
    remote_repos = [url.split("/")[-1] for url in remote_repo_urls]
    return [repo for repo in local_repos if repo not in remote_repos]


def matches_name(url, basenames):
    """
    Return if this URL matches a pattern.

    :param url: The URL to check
    :param basenames: Basenames to return True if matching
    """

    base = os.path.basename(url)
    base_without_git = os.path.splitext(base)[0]
    return base in basenames or base_without_git in basenames


def update_or_mirror_repos(args, delete=False):
    """
    For each repo by a user, either update it if it is already mirrored, or
    mirror it

    :param args: the arguments passed on the command line
    """

    user_repos = list(repos(args.username))

    for repo in user_repos:
        url = repo["ssh_url"]

        if matches_name(url, args.include):
            print("Bypassing skip checks for {} as it matches an include".format(url))
        else:
            if args.exclude_forks and repo["fork"]:
                print("Skipping {} as as --exclude-forks was passed".format(url))
                continue

            if matches_name(url, args.exclude):
                print("Skipping {} as it matches an exclude".format(url))
                continue

        if repo_already_mirrored(url):
            update(repo)
        else:
            mirror(repo)

    if delete:
        repos_to_delete = remotely_deleted_repos(user_repos)
        for repo in repos_to_delete:
            shutil.rmtree(repo)


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-e", "--exclude", action="append", help="repo names to exclude", default=[]
    )
    parser.add_argument(
        "-i", "--include", action="append", help="repo names to include", default=[]
    )
    parser.add_argument(
        "-f",
        "--exclude-forks",
        action="store_true",
        help="exclude forks",
    )
    parser.add_argument("username", help="the user's repos to mirror")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    update_or_mirror_repos(args, delete=False)
